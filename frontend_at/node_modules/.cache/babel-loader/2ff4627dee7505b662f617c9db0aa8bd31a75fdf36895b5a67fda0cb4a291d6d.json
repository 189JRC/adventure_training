{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.msg, provider => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: provider.id\n    }, [_createElementVNode(\"h1\", null, _toDisplayString(provider.company_name), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */)), _createTextVNode(\" TEST¬ \")]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$data","msg","provider","key","id","_createElementVNode","_toDisplayString","company_name"],"sources":["/home/ouroboros/Web_dev/FLASK/3flask/frontend/vue_at/src/components/Providers.vue"],"sourcesContent":["<template>\n  <div>\n    <div v-for=\"provider in msg\" :key=\"provider.id\">\n        <h1>{{provider.company_name}}\n    </h1>\n    </div>\n    TEST¬\n  </div>\n</template>\n\n<script>\n\nimport axios from 'axios';\n\nexport default {\n    name: 'thread',\n    data() {\n        return {\n            msg: [],\n        }\n    },\n    methods: {\n        getResponse() {\n            const path = 'http://localhost:5000/providers_data';\n            axios.get(path)\n            .then ((res) => {\n                console.log(res.data)\n                this.msg = res.data\n            })\n            .catch ((err) => {\n                console.log(err)\n            })\n        },\n    },\n    created(){\n        this.getResponse();\n    }\n}\n</script>\n\n<style>\n\n</style>"],"mappings":";;uBACEA,mBAAA,CAMM,e,kBALJA,mBAAA,CAGMC,SAAA,QAAAC,WAAA,CAHkBC,KAAA,CAAAC,GAAG,EAAfC,QAAQ;yBAApBL,mBAAA,CAGM;MAHwBM,GAAG,EAAED,QAAQ,CAACE;QACxCC,mBAAA,CACC,YAAAC,gBAAA,CADKJ,QAAQ,CAACK,YAAY,iB;mDAEzB,SAER,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}